
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141202 (SVN rev 60)
//----------------------------------------------------

package microjs.jcompiler.frontend.parser;

import java.util.List;
import java.util.LinkedList;
import java_cup.runtime.*;
import microjs.jcompiler.frontend.lexer.Lexer;
import microjs.jcompiler.frontend.ast.*;
import java_cup.runtime.ComplexSymbolFactory.Location;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141202 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\047\000\002\002\003\000\002\002\004\000\002\003" +
    "\005\000\002\003\010\000\002\003\004\000\002\003\002" +
    "\000\002\004\002\000\002\004\005\000\002\004\006\000" +
    "\002\004\003\000\002\004\004\000\002\005\011\000\002" +
    "\005\007\000\002\005\010\000\002\007\005\000\002\010" +
    "\005\000\002\010\003\000\002\010\002\000\002\006\003" +
    "\000\002\006\003\000\002\006\006\000\002\006\007\000" +
    "\002\006\003\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\010\000\002\006\006\000\002\006\006" +
    "\000\002\006\003\000\002\006\006\000\002\006\010\000" +
    "\002\006\006\000\002\011\005\000\002\011\003\000\002" +
    "\011\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\050\002\ufffc\004\ufffb\005\030\006\023\010" +
    "\014\016\012\021\011\022\031\027\010\033\017\034\016" +
    "\035\020\036\013\037\022\040\021\041\024\042\007\043" +
    "\006\044\026\001\002\000\004\004\145\001\002\000\020" +
    "\004\ufff8\010\053\023\050\024\051\025\054\026\052\030" +
    "\055\001\002\000\024\004\uffef\010\uffef\011\uffef\020\uffef" +
    "\023\uffef\024\uffef\025\uffef\026\uffef\030\uffef\001\002\000" +
    "\022\004\uffeb\007\143\010\uffeb\023\uffeb\024\uffeb\025\uffeb" +
    "\026\uffeb\030\uffeb\001\002\000\032\010\014\022\031\033" +
    "\017\034\016\035\020\036\013\037\022\040\021\041\024" +
    "\042\046\043\006\044\026\001\002\000\004\042\135\001" +
    "\002\000\004\010\127\001\002\000\024\004\uffe1\010\uffe1" +
    "\011\uffe1\020\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\030" +
    "\uffe1\001\002\000\032\010\014\022\031\033\017\034\016" +
    "\035\020\036\013\037\022\040\021\041\024\042\046\043" +
    "\006\044\026\001\002\000\004\002\124\001\002\000\004" +
    "\010\121\001\002\000\004\010\114\001\002\000\004\010" +
    "\111\001\002\000\004\010\104\001\002\000\004\010\101" +
    "\001\002\000\004\042\074\001\002\000\004\010\071\001" +
    "\002\000\052\002\ufffc\004\ufffb\005\030\006\023\010\014" +
    "\013\ufffc\016\012\021\011\022\031\027\010\033\017\034" +
    "\016\035\020\036\013\037\022\040\021\041\024\042\007" +
    "\043\006\044\026\001\002\000\024\004\uffee\010\uffee\011" +
    "\uffee\020\uffee\023\uffee\024\uffee\025\uffee\026\uffee\030\uffee" +
    "\001\002\000\004\002\001\001\002\000\004\042\044\001" +
    "\002\000\004\010\032\001\002\000\006\011\ufff0\042\034" +
    "\001\002\000\004\011\037\001\002\000\006\011\ufff1\020" +
    "\035\001\002\000\006\011\ufff0\042\034\001\002\000\004" +
    "\011\ufff2\001\002\000\004\012\040\001\002\000\050\004" +
    "\ufffb\005\030\006\023\010\014\013\ufffc\016\012\021\011" +
    "\022\031\027\010\033\017\034\016\035\020\036\013\037" +
    "\022\040\021\041\024\042\007\043\006\044\026\001\002" +
    "\000\024\004\uffec\010\uffec\011\uffec\020\uffec\023\uffec\024" +
    "\uffec\025\uffec\026\uffec\030\uffec\001\002\000\004\013\043" +
    "\001\002\000\072\002\ufff3\004\ufff3\005\ufff3\006\ufff3\010" +
    "\ufff3\011\ufff3\013\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3" +
    "\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\030" +
    "\ufff3\033\ufff3\034\ufff3\035\ufff3\036\ufff3\037\ufff3\040\ufff3" +
    "\041\ufff3\042\ufff3\043\ufff3\044\ufff3\001\002\000\004\007" +
    "\045\001\002\000\032\010\014\022\031\033\017\034\016" +
    "\035\020\036\013\037\022\040\021\041\024\042\046\043" +
    "\006\044\026\001\002\000\024\004\uffeb\010\uffeb\011\uffeb" +
    "\020\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb\030\uffeb\001" +
    "\002\000\020\004\ufff9\010\053\023\050\024\051\025\054" +
    "\026\052\030\055\001\002\000\032\010\014\022\031\033" +
    "\017\034\016\035\020\036\013\037\022\040\021\041\024" +
    "\042\046\043\006\044\026\001\002\000\032\010\014\022" +
    "\031\033\017\034\016\035\020\036\013\037\022\040\021" +
    "\041\024\042\046\043\006\044\026\001\002\000\032\010" +
    "\014\022\031\033\017\034\016\035\020\036\013\037\022" +
    "\040\021\041\024\042\046\043\006\044\026\001\002\000" +
    "\034\010\014\011\uffdb\022\031\033\017\034\016\035\020" +
    "\036\013\037\022\040\021\041\024\042\046\043\006\044" +
    "\026\001\002\000\032\010\014\022\031\033\017\034\016" +
    "\035\020\036\013\037\022\040\021\041\024\042\046\043" +
    "\006\044\026\001\002\000\032\010\014\022\031\033\017" +
    "\034\016\035\020\036\013\037\022\040\021\041\024\042" +
    "\046\043\006\044\026\001\002\000\024\004\uffe6\010\053" +
    "\011\uffe6\020\uffe6\023\050\024\051\025\054\026\052\030" +
    "\055\001\002\000\024\004\uffe8\010\uffe8\011\uffe8\020\uffe8" +
    "\023\uffe8\024\uffe8\025\uffe8\026\uffe8\030\uffe8\001\002\000" +
    "\004\011\064\001\002\000\022\010\053\011\uffdc\020\062" +
    "\023\050\024\051\025\054\026\052\030\055\001\002\000" +
    "\034\010\014\011\uffdb\022\031\033\017\034\016\035\020" +
    "\036\013\037\022\040\021\041\024\042\046\043\006\044" +
    "\026\001\002\000\004\011\uffdd\001\002\000\024\004\uffed" +
    "\010\uffed\011\uffed\020\uffed\023\uffed\024\uffed\025\uffed\026" +
    "\uffed\030\uffed\001\002\000\024\004\uffe7\010\uffe7\011\uffe7" +
    "\020\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\030\uffe7\001" +
    "\002\000\024\004\uffe9\010\uffe9\011\uffe9\020\uffe9\023\uffe9" +
    "\024\uffe9\025\054\026\052\030\uffe9\001\002\000\024\004" +
    "\uffea\010\uffea\011\uffea\020\uffea\023\uffea\024\uffea\025\054" +
    "\026\052\030\uffea\001\002\000\006\002\ufffd\013\ufffd\001" +
    "\002\000\032\010\014\022\031\033\017\034\016\035\020" +
    "\036\013\037\022\040\021\041\024\042\046\043\006\044" +
    "\026\001\002\000\020\010\053\011\073\023\050\024\051" +
    "\025\054\026\052\030\055\001\002\000\024\004\uffde\010" +
    "\uffde\011\uffde\020\uffde\023\uffde\024\uffde\025\uffde\026\uffde" +
    "\030\uffde\001\002\000\004\007\075\001\002\000\032\010" +
    "\014\022\031\033\017\034\016\035\020\036\013\037\022" +
    "\040\021\041\024\042\046\043\006\044\026\001\002\000" +
    "\020\004\077\010\053\023\050\024\051\025\054\026\052" +
    "\030\055\001\002\000\052\002\ufffc\004\ufffb\005\030\006" +
    "\023\010\014\013\ufffc\016\012\021\011\022\031\027\010" +
    "\033\017\034\016\035\020\036\013\037\022\040\021\041" +
    "\024\042\007\043\006\044\026\001\002\000\006\002\ufffe" +
    "\013\ufffe\001\002\000\032\010\014\022\031\033\017\034" +
    "\016\035\020\036\013\037\022\040\021\041\024\042\046" +
    "\043\006\044\026\001\002\000\020\010\053\011\103\023" +
    "\050\024\051\025\054\026\052\030\055\001\002\000\024" +
    "\004\uffe0\010\uffe0\011\uffe0\020\uffe0\023\uffe0\024\uffe0\025" +
    "\uffe0\026\uffe0\030\uffe0\001\002\000\032\010\014\022\031" +
    "\033\017\034\016\035\020\036\013\037\022\040\021\041" +
    "\024\042\046\043\006\044\026\001\002\000\020\010\053" +
    "\020\106\023\050\024\051\025\054\026\052\030\055\001" +
    "\002\000\032\010\014\022\031\033\017\034\016\035\020" +
    "\036\013\037\022\040\021\041\024\042\046\043\006\044" +
    "\026\001\002\000\020\010\053\011\110\023\050\024\051" +
    "\025\054\026\052\030\055\001\002\000\024\004\uffdf\010" +
    "\uffdf\011\uffdf\020\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf" +
    "\030\uffdf\001\002\000\032\010\014\022\031\033\017\034" +
    "\016\035\020\036\013\037\022\040\021\041\024\042\046" +
    "\043\006\044\026\001\002\000\020\010\053\011\113\023" +
    "\050\024\051\025\054\026\052\030\055\001\002\000\024" +
    "\004\uffe2\010\uffe2\011\uffe2\020\uffe2\023\uffe2\024\uffe2\025" +
    "\uffe2\026\uffe2\030\uffe2\001\002\000\032\010\014\022\031" +
    "\033\017\034\016\035\020\036\013\037\022\040\021\041" +
    "\024\042\046\043\006\044\026\001\002\000\020\010\053" +
    "\020\116\023\050\024\051\025\054\026\052\030\055\001" +
    "\002\000\032\010\014\022\031\033\017\034\016\035\020" +
    "\036\013\037\022\040\021\041\024\042\046\043\006\044" +
    "\026\001\002\000\020\010\053\011\120\023\050\024\051" +
    "\025\054\026\052\030\055\001\002\000\024\004\uffe4\010" +
    "\uffe4\011\uffe4\020\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4" +
    "\030\uffe4\001\002\000\032\010\014\022\031\033\017\034" +
    "\016\035\020\036\013\037\022\040\021\041\024\042\046" +
    "\043\006\044\026\001\002\000\020\010\053\011\123\023" +
    "\050\024\051\025\054\026\052\030\055\001\002\000\024" +
    "\004\uffe3\010\uffe3\011\uffe3\020\uffe3\023\uffe3\024\uffe3\025" +
    "\uffe3\026\uffe3\030\uffe3\001\002\000\004\002\000\001\002" +
    "\000\020\010\053\011\126\023\050\024\051\025\054\026" +
    "\052\030\055\001\002\000\024\004\uffe5\010\uffe5\011\uffe5" +
    "\020\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\030\uffe5\001" +
    "\002\000\032\010\014\022\031\033\017\034\016\035\020" +
    "\036\013\037\022\040\021\041\024\042\046\043\006\044" +
    "\026\001\002\000\020\010\053\011\131\023\050\024\051" +
    "\025\054\026\052\030\055\001\002\000\004\012\040\001" +
    "\002\000\054\002\ufff5\004\ufff5\005\ufff5\006\ufff5\010\ufff5" +
    "\013\ufff5\016\ufff5\017\133\021\ufff5\022\ufff5\027\ufff5\033" +
    "\ufff5\034\ufff5\035\ufff5\036\ufff5\037\ufff5\040\ufff5\041\ufff5" +
    "\042\ufff5\043\ufff5\044\ufff5\001\002\000\004\012\040\001" +
    "\002\000\052\002\ufff6\004\ufff6\005\ufff6\006\ufff6\010\ufff6" +
    "\013\ufff6\016\ufff6\021\ufff6\022\ufff6\027\ufff6\033\ufff6\034" +
    "\ufff6\035\ufff6\036\ufff6\037\ufff6\040\ufff6\041\ufff6\042\ufff6" +
    "\043\ufff6\044\ufff6\001\002\000\004\010\136\001\002\000" +
    "\006\011\ufff0\042\034\001\002\000\004\011\140\001\002" +
    "\000\004\012\040\001\002\000\052\002\ufff4\004\ufff4\005" +
    "\ufff4\006\ufff4\010\ufff4\013\ufff4\016\ufff4\021\ufff4\022\ufff4" +
    "\027\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4\040" +
    "\ufff4\041\ufff4\042\ufff4\043\ufff4\044\ufff4\001\002\000\020" +
    "\004\ufff7\010\053\023\050\024\051\025\054\026\052\030" +
    "\055\001\002\000\032\010\014\022\031\033\017\034\016" +
    "\035\020\036\013\037\022\040\021\041\024\042\046\043" +
    "\006\044\026\001\002\000\020\004\ufffa\010\053\023\050" +
    "\024\051\025\054\026\052\030\055\001\002\000\052\002" +
    "\ufffc\004\ufffb\005\030\006\023\010\014\013\ufffc\016\012" +
    "\021\011\022\031\027\010\033\017\034\016\035\020\036" +
    "\013\037\022\040\021\041\024\042\007\043\006\044\026" +
    "\001\002\000\006\002\uffff\013\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\144\000\014\002\014\003\026\004\003\005\024\006" +
    "\004\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\067\004\003\005\024\006\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\035\001\001\000\002\001\001\000\004\007" +
    "\040\001\001\000\012\003\041\004\003\005\024\006\004" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\066\001\001\000" +
    "\004\006\065\001\001\000\004\006\064\001\001\000\006" +
    "\006\060\011\057\001\001\000\004\006\056\001\001\000" +
    "\004\006\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\006\060\011" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\075\001\001\000" +
    "\002\001\001\000\012\003\077\004\003\005\024\006\004" +
    "\001\001\000\002\001\001\000\004\006\101\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\104\001\001" +
    "\000\002\001\001\000\004\006\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\114\001\001\000" +
    "\002\001\001\000\004\006\116\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\121\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\127\001\001\000\002\001" +
    "\001\000\004\007\131\001\001\000\002\001\001\000\004" +
    "\007\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\136\001\001\000\002\001\001\000\004\007\140" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\143\001\001\000\002\001\001\000\012\003\145\004\003" +
    "\005\024\006\004\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= statements 
            {
              Prog RESULT =null;
		Location progxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location progxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		List<Statement> prog = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Prog("", prog, progxleft, progxright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		Location start_valxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location start_valxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Prog start_val = (Prog)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // statements ::= statement SEMICOL statements 
            {
              List<Statement> RESULT =null;
		Location stxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location stxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location stsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location stsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		List<Statement> sts = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((LinkedList<Statement>) sts).addFirst(st); RESULT=sts; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statements ::= LET IDENTIFIER EQ expr SEMICOL statements 
            {
              List<Statement> RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xright;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location stsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location stsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		List<Statement> sts = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<Statement> lsts = new LinkedList<Statement>();
                                                              lsts.add(new Let(var, e, sts, lxleft, stsxright));
                                                              RESULT = lsts; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statements ::= block_statement statements 
            {
              List<Statement> RESULT =null;
		Location stxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location stxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location stsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location stsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		List<Statement> sts = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((LinkedList<Statement>) sts).addFirst(st); RESULT=sts; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statements ::= 
            {
              List<Statement> RESULT =null;
		 RESULT = new LinkedList<Statement>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statements",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= 
            {
              Statement RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statement ::= IDENTIFIER EQ expr 
            {
              Statement RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Assign(id, e, idxleft, exright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= VAR IDENTIFIER EQ expr 
            {
              Statement RESULT =null;
		Location vxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xleft;
		Location vxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xright;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Var(var, e, vxleft, exright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= expr 
            {
              Statement RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VoidExpr(e, exleft, exright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement ::= RETURN expr 
            {
              Statement RESULT =null;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Return(e, rxleft, exright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // block_statement ::= IF LPAREN expr RPAREN block ELSE block 
            {
              Statement RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).xright;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		Location condxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xleft;
		Location condxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xright;
		Expr cond = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Location thensxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location thensxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		List<Statement> thens = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location elsesxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location elsesxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		List<Statement> elses = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(cond, thens, elses, ixleft, elsesxright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_statement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // block_statement ::= IF LPAREN expr RPAREN block 
            {
              Statement RESULT =null;
		Location ixleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xleft;
		Location ixright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xright;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Location condxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location condxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Expr cond = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location thensxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location thensxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		List<Statement> thens = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(cond, thens, new LinkedList<Statement>(), ixleft, thensxright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_statement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // block_statement ::= FUNCTION IDENTIFIER LPAREN parameters RPAREN block 
            {
              Statement RESULT =null;
		Location fxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).xleft;
		Location fxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).xright;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Location paramsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location paramsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		List<String> params = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location bodyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location bodyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		List<Statement> body = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Function(id, params, body, fxleft, bodyxright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block_statement",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // block ::= LCURLY statements RCURLY 
            {
              List<Statement> RESULT =null;
		Location stsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location stsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		List<Statement> sts = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = sts; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("block",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parameters ::= IDENTIFIER COMMA parameters 
            {
              List<String> RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location paramsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location paramsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		List<String> params = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((LinkedList<String>) params).addFirst(id); RESULT=params; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parameters ::= IDENTIFIER 
            {
              List<String> RESULT =null;
		Location idxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location idxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<String> tempList = new LinkedList<String>();
                     tempList.add(id); RESULT = tempList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // parameters ::= 
            {
              List<String> RESULT =null;
		 RESULT = new LinkedList<String>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameters",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expr ::= INT 
            {
              Expr RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntConst(n, nxleft, nxright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expr ::= BOOL 
            {
              Expr RESULT =null;
		Location bxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location bxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BoolConst(b, bxleft, bxright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expr ::= expr LPAREN arguments RPAREN 
            {
              Expr RESULT =null;
		Location funxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xleft;
		Location funxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xright;
		Expr fun = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Location argsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location argsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		List<Expr> args = (List<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Funcall(fun, args, funxleft, argsxright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expr ::= LAMBDA LPAREN parameters RPAREN block 
            {
              Expr RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).xright;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		Location paramsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location paramsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		List<String> params = (List<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location bodyxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location bodyxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		List<Statement> body = (List<Statement>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Lambda(params, body, lxleft, bodyxright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= IDENTIFIER 
            {
              Expr RESULT =null;
		Location varxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location varxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EVar(var, varxleft, varxright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= expr PLUS expr 
            {
              Expr RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinOp("+", l, r, lxleft, rxright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= expr MINUS expr 
            {
              Expr RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinOp("-", l, r, lxleft, rxright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= expr TIMES expr 
            {
              Expr RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinOp("*", l, r, lxleft, rxright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= expr DIV expr 
            {
              Expr RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinOp("/", l, r, lxleft, rxright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr EQEQ expr 
            {
              Expr RESULT =null;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinOp("==", l, r, lxleft, rxright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= CONS LPAREN expr COMMA expr RPAREN 
            {
              Expr RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).xright;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		Location lxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xleft;
		Location lxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xright;
		Expr l = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Location rxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location rxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Expr r = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Pair(l,r, cxleft,cxright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= CAR LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xright;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Access("car", e, cxleft, cxright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= CDR LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		Location cxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xleft;
		Location cxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xright;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Access("cdr", e, cxleft, cxright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= NIL 
            {
              Expr RESULT =null;
		Location nxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location nxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nil(nxleft, nxright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= PRINT LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		Location pxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xleft;
		Location pxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xright;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Print(e, pxleft, pxright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= TCREATE LPAREN expr COMMA expr RPAREN 
            {
              Expr RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).xright;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		Location funxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xleft;
		Location funxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xright;
		Expr fun = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Location argxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location argxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Expr arg = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Tcreate(fun, arg, txleft, txright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= TJOIN LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		Location txleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xleft;
		Location txright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).xright;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Tjoin(e, txleft, txright); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // arguments ::= expr COMMA arguments 
            {
              List<Expr> RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Location argsxleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location argsxright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		List<Expr> args = (List<Expr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ((LinkedList<Expr>) args).addFirst(e); RESULT = args; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // arguments ::= expr 
            {
              List<Expr> RESULT =null;
		Location exleft = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xleft;
		Location exright = ((java_cup.runtime.ComplexSymbolFactory.ComplexSymbol)CUP$parser$stack.peek()).xright;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<Expr> tempList = new LinkedList<Expr>();
               tempList.add(e); RESULT = tempList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // arguments ::= 
            {
              List<Expr> RESULT =null;
		 RESULT = new LinkedList<Expr>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
